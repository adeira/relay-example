schema {
  query: RootQuery
  mutation: RootMutation
}

type AdditionalBaggage {
  price: Price

  """Number of baggage."""
  quantity: Int
}

type Address {
  """Contains street and number."""
  street: String
  city: String
  zip: String
}

type Airline {
  name: String

  """2-letter IATA code of airline."""
  code: String
  logoUrl: String

  """Airline is low cost carrier."""
  isLowCost: Boolean
}

type AirportArrivalTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime

  """Location of departure"""
  location: RouteStop
}

"""
Information about hotel availability during selected time period from Stay22 api.
"""
type AllAvailableStay22Hotel implements AllHotelsInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Name of the hotel."""
  name: String
  address: Address
  review: HotelReview

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  price: Price @deprecated(reason: "Use money type instead")

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  money: Money
  rating: HotelRating

  """Hotel distance from the center in Km."""
  distanceFromCenter: Float

  """Main photo of the hotel."""
  mainPhoto: HotelPhoto

  """Stay 22 id"""
  hotelId: ID

  """Location of the hotel."""
  coordinates: Coordinates
}

"""A connection to a list of items."""
type AllAvailableStay22HotelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AllAvailableStay22HotelEdge]

  """Name of the closest city"""
  cityName: String

  """Meta data for the search"""
  stats: HotelSearchMeta
}

"""An edge in a connection."""
type AllAvailableStay22HotelEdge {
  """The item at the end of the edge"""
  node: AllAvailableStay22Hotel

  """A cursor for use in pagination"""
  cursor: String!
}

type AllCustomerSupportNumbers {
  """Premium customer support phone numbers"""
  premiumCustomerSupportNumbers: [CustomerSupportNumber]

  """Standard customer support phone numbers"""
  standardCustomerSupportNumbers: [CustomerSupportNumber]
}

"""Information about hotel availability during selected time period."""
type AllHotelAvailabilityHotel implements AllHotelsInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Name of the hotel."""
  name: String
  address: Address
  review: HotelReview

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  price: Price @deprecated(reason: "Use money type instead")

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  money: Money
  rating: HotelRating

  """Hotel distance from the center in Km."""
  distanceFromCenter: Float

  """Main photo of the hotel."""
  mainPhoto: HotelPhoto

  """ID of hotel"""
  hotelId: ID

  """Location of the hotel."""
  coordinates: Coordinates
}

"""A connection to a list of items."""
type AllHotelAvailabilityHotelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AllHotelAvailabilityHotelEdge]
  stats: HotelAvailabilityStats

  """Name of the closest city"""
  cityName: String
}

"""An edge in a connection."""
type AllHotelAvailabilityHotelEdge {
  """The item at the end of the edge"""
  node: AllHotelAvailabilityHotel

  """A cursor for use in pagination"""
  cursor: String!
}

interface AllHotelsInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  name: String
  address: Address
  review: HotelReview
  price: Price
  money: Money
  rating: HotelRating
  distanceFromCenter: Float
  mainPhoto: HotelPhoto
  hotelId: ID
  coordinates: Coordinates
}

type AllowedBaggage {
  """Extra and overweight baggage."""
  additionalBaggage: [AdditionalBaggage]

  """Small carry-on luggage."""
  cabin: [Baggage]

  """Baggage checked online."""
  checked: [Baggage]
}

"""List of ancillaries that are ordered with booking"""
type Ancillaries {
  fastTrack: [AncillaryPerSegmentPerPassenger]
  blueribbonBags: [AncillaryPerSegmentPerPassenger]
  airhelpPlus: [AncillaryPerBooking]
}

input Ancillaries3rdCarrier {
  operational: Ancillaries3rdOperational
}

input Ancillaries3rdItinerary {
  """Segment code"""
  segment_code: String

  """
  Arrival time of the segment, its in timestamp format "1550042100"
  """
  arrival: Int

  """Destination of a segment ex. "TXL", "MAD" etc."""
  destinationCode: String

  """
  Departure time of the segment, its in timestamp format "1550042100"
  """
  departure: Int

  """
  Source of a segment "TXL", "MAD"
  """
  sourceCode: String

  """Carrier of a particular segment"""
  carrier: Ancillaries3rdCarrier
  carrier_segment_code: String
  vehicle: Ancillaries3rdVehicle
}

"""Ancillaries3rd offers for the booking"""
type Ancillaries3rdOffers {
  name: String
  service: String
  type: Int
  data: Ancillaries3rdOffersData
}

"""A connection to a list of items."""
type Ancillaries3rdOffersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [Ancillaries3rdOffersEdge]
}

type Ancillaries3rdOffersData {
  is_applicable: Boolean
  price_info: Ancillaries3rdOffersPriceInfo
}

"""An edge in a connection."""
type Ancillaries3rdOffersEdge {
  """The item at the end of the edge"""
  node: Ancillaries3rdOffers

  """A cursor for use in pagination"""
  cursor: String!
}

type Ancillaries3rdOffersPriceInfo {
  base_price: Float
  service_fee: Float
  currency: String
}

input Ancillaries3rdOperational {
  """Carrier segment code"""
  code: String
}

input Ancillaries3rdServices {
  """Name of the requested ancillary"""
  service: AvailableServicesEnums
}

input Ancillaries3rdVehicle {
  """Segment vehicle type"""
  type: String
}

"""Ancillary document with url to document"""
type AncillaryDocument {
  url: String
}

enum AncillaryOrderStateEnum {
  DONE
  PROCESSING
}

type AncillaryPerBooking {
  extra_id: Int

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  orderState: AncillaryOrderStateEnum
  price: AncillaryPrice
  thirdPartyAncillaryOrderId: Int
}

type AncillaryPerSegmentPerPassenger {
  extraId: Int
  id: Int
  items: [PassengerSegment]
  orderState: AncillaryOrderStateEnum
  thirdPartyAncillaryOrderId: Int
  attachments: [AncillaryDocument]
}

type AncillaryPrice {
  amount: String
  base: String
  currency: String
  merchant: String
  service: String
  service_flat: String
}

input AreaInput {
  """Top left coordinates of the area."""
  topLeft: CoordinatesInput!

  """Bottom right coordinates of the area."""
  bottomRight: CoordinatesInput!
}

type ArrivalTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime

  """Location of arrival"""
  location: RouteStop
}

enum AttachmentsFor {
  FAST_TRACK
}

enum availabilityStatus {
  AVAILABLE
  IN_FUTURE
  AT_AIRPORT
  OTHER
}

input AvailableHotelOptionsInput {
  """Three-letters ISO 4217 currency code, e.g. EUR or USD"""
  currency: Currency

  """Order results by this input type"""
  orderBy: OrderBy
}

input AvailableHotelSearchInput {
  """Opaque hotel ID."""
  hotelId: ID!
  checkin: Date!
  checkout: Date!
  roomsConfiguration: [RoomsConfiguration!]!
  language: Language
}

enum AvailableServicesEnums {
  airhelp_plus
  blueribbon_bags
  fast_track
  paid_checkin
  cover_more
  axa
}

type Baggage {
  height: Int
  length: Int
  width: Int
  weight: Int
  note: String
  category: BaggageCategory
}

enum BaggageCategory {
  CHECKED
  PERSONAL_ITEM
  CABIN_BAG
}

type BoardingPass {
  flightNumber: String
  boardingPassUrl: String

  """The leg for the boarding pass"""
  leg: Leg

  """The date when the boarding pass will be available for download"""
  availableAt: Date

  """Boarding pass availability status"""
  availabilityStatus: availabilityStatus

  """pkpasses connected to the boarding pass"""
  pkpasses: [Pkpass]
}

type BoardingTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime

  """Terminal at which boarding is done"""
  terminal: String
}

type BookedFlightTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime

  """Location of arrival"""
  location: RouteStop
}

type BookedService {
  """Type of booked service"""
  category: BookedServiceCategory

  """Status of booked service"""
  status: BookedServiceStatus
}

enum BookedServiceCategory {
  ALLOCATED_SEATING
  SPECIAL_ASSISTANCE
  SPORTS_EQUIPMENT
  TRAVELLING_WITH_PETS
  MUSICAL_EQUIPMENT
  MEALS_ON_BOARD
  BAGS
  EXTRAS_BAGS
  EXTRAS_OTHER
  EXTRAS_CHANGE_FLIGHT
  EXTRAS_PASSENGER_DETAILS_CHANGE
  UPDATE_INSURANCES
  PRICE_CHANGE
  FLIGHTS
}

enum BookedServiceStatus {
  CONFIRMED
  CLOSED
  PENDING
  OPEN
}

"""
DEPRECATED! Use "customerBookings" query instead. That query will return
interface instead so you don't have to work with this generic type.
"""
type Booking {
  arrival: RouteStop @deprecated(reason: "Use \"oneWay\", \"return\" & \"multicity\"  fields to retrieve booking info.")
  departure: RouteStop @deprecated(reason: "Use \"oneWay\", \"return\" & \"multicity\"  fields to retrieve booking info.")

  """Flight segments, e.g. stopover, change of aircraft, etc."""
  legs: [Leg] @deprecated(reason: "Use \"oneWay\", \"return\" & \"multicity\"  fields to retrieve booking info.")

  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Unique number identifying the booking in communication with support."""
  databaseId: Int @deprecated(reason: "Use field \"id\" directly (with opaque parameter)")
  type: BookingType @deprecated(reason: "Manual type is not necessary. Use \"__typename\" instead.")
  status: BookingStatus

  """Total price of the whole booking."""
  price: Price

  """Date of the booking creation"""
  bookingDate: Date
  allowedBaggage: AllowedBaggage
  baggage: [BookingBaggage]

  """Static assets related to this booking."""
  assets: BookingAssets
  passengers: [Passenger]
  passengerCount: Int
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String

  """List of carriers involved in the booking."""
  carriers: [Carrier]

  """
  You can use this link to access one particular booking directly WITHOUT PASSWORD. Use it carefully.
  """
  directAccessURL(deeplinkTo: DirectAccessURLValues): String
  bookedServices: [BookedService]
  contactDetails: BookingContactDetails
  isPastBooking: Boolean

  """All services provided directly by Kiwi.com."""
  availableServices: Services

  """All services provided via whitelabels."""
  availableWhitelabeledServices: WhitelabeledServices

  """Support provided by CS for booking."""
  customerSupport: BookingCustomerSupport
  onlineCheckinIsAvailable: Boolean
  insurancePrices: [InsurancePrice]
  authToken: String @deprecated(reason: "Use correctly named \"simpleToken\" arg instead.")

  """
  Simple token that lets you fetch a unique booking without authorization.
  """
  simpleToken: String

  """Nearest upcoming leg by arrival time."""
  upcomingLeg(
    """Filter out only legs with specified guarantee."""
    guarantee: CoveredBy
  ): Leg

  """Check-in information (status, dates)"""
  checkIn: CheckIn
  oneWay: BookingOneWay
  return: BookingReturn
  multicity: BookingMulticity
  holiday: BookingHoliday
}

type BookingAssets {
  """
  URL of the electronic ticket. Ticket may not be available yet (returns null).
  """
  ticketUrl: String

  """URL of the invoice."""
  invoiceUrl: String

  """Boarding passes for flights in this booking"""
  boardingPasses: [BoardingPass]
}

type BookingBaggage {
  quantity: Int
  passengers: [Passenger]
  bag: Baggage
}

type BookingConfirmedTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""Contact details related to the booking"""
type BookingContactDetails {
  phone: String
  email: String

  """Documentation and information about the passanger."""
  passenger: Passenger
}

type BookingCustomerSupport {
  """
  Is Guarantee Chat allowed to provide direct contact to customer service.
  """
  hasGuaranteeChat: Boolean

  """
  Localised phone number of customer service. Null if not available for that locale.
  """
  phoneNumber: String
}

enum BookingDestinationImageDimensions {
  _1200x628
  _1280x720
  _220x165
  _275x250
  _300x165
  _375x165
  _600x330
  _600x600
  _610x251
}

type BookingHoliday implements BookingInterface & Node {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Unique number identifying the booking in communication with support."""
  databaseId: Int @deprecated(reason: "Use field \"id\" directly (with opaque parameter)")
  type: BookingType @deprecated(reason: "Manual type is not necessary. Use \"__typename\" instead.")
  status: BookingStatus

  """Total price of the whole booking."""
  price: Price

  """Date of the booking creation"""
  bookingDate: Date
  allowedBaggage: AllowedBaggage
  baggage: [BookingBaggage]

  """Static assets related to this booking."""
  assets: BookingAssets
  passengers: [Passenger]
  passengerCount: Int
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String

  """List of carriers involved in the booking."""
  carriers: [Carrier]

  """
  You can use this link to access one particular booking directly WITHOUT PASSWORD. Use it carefully.
  """
  directAccessURL(deeplinkTo: DirectAccessURLValues): String
  bookedServices: [BookedService]
  contactDetails: BookingContactDetails
  isPastBooking: Boolean

  """All services provided directly by Kiwi.com."""
  availableServices: Services

  """All services provided via whitelabels."""
  availableWhitelabeledServices: WhitelabeledServices

  """Support provided by CS for booking."""
  customerSupport: BookingCustomerSupport
  onlineCheckinIsAvailable: Boolean
  insurancePrices: [InsurancePrice]
  authToken: String @deprecated(reason: "Use correctly named \"simpleToken\" arg instead.")

  """
  Simple token that lets you fetch a unique booking without authorization.
  """
  simpleToken: String

  """Nearest upcoming leg by arrival time."""
  upcomingLeg(
    """Filter out only legs with specified guarantee."""
    guarantee: CoveredBy
  ): Leg

  """Check-in information (status, dates)"""
  checkIn: CheckIn
  accommodation: HolidayAccommodation @deprecated(reason: "Holidays are off, no data returned.")
  travelInfo: HolidayTravelInfo @deprecated(reason: "Holidays are off, no data returned.")
}

type BookingIdentity {
  affiliateId: String

  """Discounts for booking payments in % from base price."""
  discounts: BookingIdentityDiscounts

  """Current balance of Kiwi.com credits by currency."""
  balances: [Money]
}

type BookingIdentityDiscounts {
  """Discount in % from base price when using Kiwi.com credits."""
  credits: Int

  """Discount in % from base price when using card."""
  card: Int
}

interface BookingInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Unique number identifying the booking in communication with support."""
  databaseId: Int @deprecated(reason: "Use field \"id\" directly (with opaque parameter)")
  type: BookingType @deprecated(reason: "Manual type is not necessary. Use \"__typename\" instead.")
  status: BookingStatus

  """Total price of the whole booking."""
  price: Price

  """Date of the booking creation"""
  bookingDate: Date
  allowedBaggage: AllowedBaggage
  baggage: [BookingBaggage]

  """Static assets related to this booking."""
  assets: BookingAssets
  passengers: [Passenger]
  passengerCount: Int
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String

  """List of carriers involved in the booking."""
  carriers: [Carrier]

  """
  You can use this link to access one particular booking directly WITHOUT PASSWORD. Use it carefully.
  """
  directAccessURL(deeplinkTo: DirectAccessURLValues): String
  bookedServices: [BookedService]
  contactDetails: BookingContactDetails
  isPastBooking: Boolean

  """All services provided directly by Kiwi.com."""
  availableServices: Services

  """All services provided via whitelabels."""
  availableWhitelabeledServices: WhitelabeledServices

  """Support provided by CS for booking."""
  customerSupport: BookingCustomerSupport
  onlineCheckinIsAvailable: Boolean
  insurancePrices: [InsurancePrice]
  authToken: String @deprecated(reason: "Use correctly named \"simpleToken\" arg instead.")

  """
  Simple token that lets you fetch a unique booking without authorization.
  """
  simpleToken: String

  """Nearest upcoming leg by arrival time."""
  upcomingLeg(
    """Filter out only legs with specified guarantee."""
    guarantee: CoveredBy
  ): Leg

  """Check-in information (status, dates)"""
  checkIn: CheckIn
}

"""A connection to a list of items."""
type BookingInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookingInterfaceEdge]
}

"""An edge in a connection."""
type BookingInterfaceEdge {
  """The item at the end of the edge"""
  node: BookingInterface

  """A cursor for use in pagination"""
  cursor: String!
}

type BookingMulticity implements BookingInterface & Node {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Unique number identifying the booking in communication with support."""
  databaseId: Int @deprecated(reason: "Use field \"id\" directly (with opaque parameter)")
  type: BookingType @deprecated(reason: "Manual type is not necessary. Use \"__typename\" instead.")
  status: BookingStatus

  """Total price of the whole booking."""
  price: Price

  """Date of the booking creation"""
  bookingDate: Date
  allowedBaggage: AllowedBaggage
  baggage: [BookingBaggage]

  """Static assets related to this booking."""
  assets: BookingAssets
  passengers: [Passenger]
  passengerCount: Int
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String

  """List of carriers involved in the booking."""
  carriers: [Carrier]

  """
  You can use this link to access one particular booking directly WITHOUT PASSWORD. Use it carefully.
  """
  directAccessURL(deeplinkTo: DirectAccessURLValues): String
  bookedServices: [BookedService]
  contactDetails: BookingContactDetails
  isPastBooking: Boolean

  """All services provided directly by Kiwi.com."""
  availableServices: Services

  """All services provided via whitelabels."""
  availableWhitelabeledServices: WhitelabeledServices

  """Support provided by CS for booking."""
  customerSupport: BookingCustomerSupport
  onlineCheckinIsAvailable: Boolean
  insurancePrices: [InsurancePrice]
  authToken: String @deprecated(reason: "Use correctly named \"simpleToken\" arg instead.")

  """
  Simple token that lets you fetch a unique booking without authorization.
  """
  simpleToken: String

  """Nearest upcoming leg by arrival time."""
  upcomingLeg(
    """Filter out only legs with specified guarantee."""
    guarantee: CoveredBy
  ): Leg

  """Check-in information (status, dates)"""
  checkIn: CheckIn

  """Initial origin."""
  start: RouteStop

  """Final destination."""
  end: RouteStop

  """List of trips in each multicity segment."""
  trips: [Trip]
}

"""
Booking with simple trip from origin to destination, with possible stopovers.
"""
type BookingOneWay implements BookingInterface & Node {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Unique number identifying the booking in communication with support."""
  databaseId: Int @deprecated(reason: "Use field \"id\" directly (with opaque parameter)")
  type: BookingType @deprecated(reason: "Manual type is not necessary. Use \"__typename\" instead.")
  status: BookingStatus

  """Total price of the whole booking."""
  price: Price

  """Date of the booking creation"""
  bookingDate: Date
  allowedBaggage: AllowedBaggage
  baggage: [BookingBaggage]

  """Static assets related to this booking."""
  assets: BookingAssets
  passengers: [Passenger]
  passengerCount: Int
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String

  """List of carriers involved in the booking."""
  carriers: [Carrier]

  """
  You can use this link to access one particular booking directly WITHOUT PASSWORD. Use it carefully.
  """
  directAccessURL(deeplinkTo: DirectAccessURLValues): String
  bookedServices: [BookedService]
  contactDetails: BookingContactDetails
  isPastBooking: Boolean

  """All services provided directly by Kiwi.com."""
  availableServices: Services

  """All services provided via whitelabels."""
  availableWhitelabeledServices: WhitelabeledServices

  """Support provided by CS for booking."""
  customerSupport: BookingCustomerSupport
  onlineCheckinIsAvailable: Boolean
  insurancePrices: [InsurancePrice]
  authToken: String @deprecated(reason: "Use correctly named \"simpleToken\" arg instead.")

  """
  Simple token that lets you fetch a unique booking without authorization.
  """
  simpleToken: String

  """Nearest upcoming leg by arrival time."""
  upcomingLeg(
    """Filter out only legs with specified guarantee."""
    guarantee: CoveredBy
  ): Leg

  """Check-in information (status, dates)"""
  checkIn: CheckIn
  trip: Trip
}

"""Booking with return trip. A <-> B"""
type BookingReturn implements BookingInterface & Node {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Unique number identifying the booking in communication with support."""
  databaseId: Int @deprecated(reason: "Use field \"id\" directly (with opaque parameter)")
  type: BookingType @deprecated(reason: "Manual type is not necessary. Use \"__typename\" instead.")
  status: BookingStatus

  """Total price of the whole booking."""
  price: Price

  """Date of the booking creation"""
  bookingDate: Date
  allowedBaggage: AllowedBaggage
  baggage: [BookingBaggage]

  """Static assets related to this booking."""
  assets: BookingAssets
  passengers: [Passenger]
  passengerCount: Int
  destinationImageUrl(dimensions: BookingDestinationImageDimensions = _600x600): String

  """List of carriers involved in the booking."""
  carriers: [Carrier]

  """
  You can use this link to access one particular booking directly WITHOUT PASSWORD. Use it carefully.
  """
  directAccessURL(deeplinkTo: DirectAccessURLValues): String
  bookedServices: [BookedService]
  contactDetails: BookingContactDetails
  isPastBooking: Boolean

  """All services provided directly by Kiwi.com."""
  availableServices: Services

  """All services provided via whitelabels."""
  availableWhitelabeledServices: WhitelabeledServices

  """Support provided by CS for booking."""
  customerSupport: BookingCustomerSupport
  onlineCheckinIsAvailable: Boolean
  insurancePrices: [InsurancePrice]
  authToken: String @deprecated(reason: "Use correctly named \"simpleToken\" arg instead.")

  """
  Simple token that lets you fetch a unique booking without authorization.
  """
  simpleToken: String

  """Nearest upcoming leg by arrival time."""
  upcomingLeg(
    """Filter out only legs with specified guarantee."""
    guarantee: CoveredBy
  ): Leg

  """Check-in information (status, dates)"""
  checkIn: CheckIn

  """Trip from origin to destination."""
  outbound: Trip

  """Return trip back from destination to origin."""
  inbound: Trip
}

enum BookingStatus {
  IN_PROCESS
  CONFIRMED
  REFUNDED
  NEW @deprecated(reason: "Never valid value for Booking Status, only for Booking Extra Status")
  CLOSED @deprecated(reason: "Never valid value for Booking Status, only for Booking Extra Status")
  PENDING @deprecated(reason: "Never valid value for Booking Status, only for Booking Extra Status")
  CANCELLED @deprecated(reason: "Never valid value for Booking Status, only for Booking Extra Status")
  DELETED @deprecated(reason: "Never valid value for Booking Status, only for Booking Extra Status")
  EXPIRED @deprecated(reason: "Never valid value for Booking Status, only for Booking Extra Status")
}

type BookingTimeline {
  """List of events of the Bookingtimeline"""
  events: [TimelineEvent]
}

enum BookingType {
  ONE_WAY
  RETURN
  MULTICITY
}

"""String code of Kiwi.com partner or "kiwicom"."""
scalar Brand

type CarRentalService {
  relevantCities: [CarRentalServiceRelevantCities]
}

type CarRentalServiceRelevantCities {
  whitelabelURL: String
  location: Location
}

type Carrier {
  """The ID of an object"""
  id: ID!
  name: String

  """Unique code of the carrier, IATA code for airlines."""
  code: String

  """Indicates whether it is low cost carrier."""
  isLowCost: Boolean
}

type CheckEmailResponse {
  result: CheckEmailResult
}

type CheckEmailResult {
  hasKiwiAccount: Boolean
  hasFacebook: Boolean
  hasGoogle: Boolean
  hasBooking: Boolean
}

type CheckIn {
  """Check-in status and dates per each segment of the booking"""
  segments: [CheckInInfo]
}

type CheckinClosingTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""
Object that gives you information about the check-in, such as the status and the date it opens or closes
"""
type CheckInInfo {
  """Status of the check-in"""
  status: CheckInStatuses

  """Date that the check-in is available from"""
  openAt: Date

  """Date that the check-in is closed and cannot be performed anymore"""
  closeAt: Date

  """Date that marks the deadline of check-in in at the airport"""
  airportDeadlineAt: Date

  """ID of the segment the check-in belongs to"""
  segmentCode: String
}

"""The possible Check-In statuses"""
enum CheckInStatuses {
  UNAVAILABLE
  RESTRICTED
  PROVIDE_DETAILS
  WAITING_FOR_CHECKIN
  WAITING_FOR_DETAILS
  PROCESSING
  DONE
  FAILED
  MISSED
  CANCELED
  SOME_CHECKINS_PROCESSING_SOME_MISSED
  SOME_CHECKINS_DONE_SOME_MISSED
  SOME_CHECKINS_MISSED_SOME_FAILED
  SOME_CHECKINS_DONE_SOME_PROCESSING
  SOME_CHECKINS_DONE_SOME_WAITING_FOR_DETAILS
  OTHER
}

type ChildrenType {
  age: Int
}

type Coordinates {
  """Latitude."""
  lat: Float

  """Longitude."""
  lng: Float
}

input CoordinatesInput {
  """Latitude."""
  lat: Float!

  """Longitude."""
  lng: Float!
}

enum CoveredBy {
  KIWICOM
  CARRIER
}

enum CreateAccountError {
  WEAK_PASSWORD
  ACCOUNT_EXISTS
  INVALID_EMAIL
}

input CreateAccountInput {
  email: String!
  password: String!

  """Username for login. Email is used if not provided."""
  login: String
  firstName: String = ""
  lastName: String = ""
}

type CreateAccountResponse {
  success: Boolean
  error: CreateAccountError
  identity: Identity
}

input CreateSimpleTokenInput {
  email: String!
  origin: DateAndIataCodeInput!
  bookingId: Int!
}

union CreateSimpleTokenResponse = SimpleToken | SimpleTokenError

type CreateStoredOperation {
  createdOperations: [StoredOperation]
}

interface CSPhoneAvailabilityInterface {
  """Customer support availability type"""
  type: CSPhoneAvailabilityType
}

"""Possible customer support availabilites types"""
enum CSPhoneAvailabilityType {
  WORKING_DAYS
  NONSTOP
}

type CSPhoneAvailabilityWorkingDays implements CSPhoneAvailabilityInterface {
  """Customer support availability type"""
  type: CSPhoneAvailabilityType

  """Opening hour"""
  from: String

  """Closing hour"""
  to: String
}

enum Currency {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRU
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  SSP
  STN
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  USN
  UYI
  UYU
  UZS
  VEF
  VND
  VUV
  WST
  XAF
  XAG
  XAU
  XBA
  XBB
  XBC
  XBD
  XCD
  XDR
  XOF
  XPD
  XPF
  XPT
  XSU
  XTS
  XUA
  XXX
  YER
  ZAR
  ZMW
  ZWL
}

type CurrencyDetail implements Node {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """The code of the currency as used on Kiwi.com frontend"""
  code: String

  """The name of the currency"""
  name: String

  """Format string of the currency"""
  format: String

  """Whether the format of the currency is universally accepted"""
  uncertainFormat: Boolean

  """Number of digits to round the currency to when doing conversion"""
  round: Int

  """List of affiliate IDs to enable the currency on"""
  enabledOnAffilId: [String]

  """The code of the currency used as a fallback"""
  fallback: String

  """Currency rate compared to Euro"""
  rate: Float
}

"""A connection to a list of items."""
type CurrencyDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CurrencyDetailEdge]
}

"""An edge in a connection."""
type CurrencyDetailEdge {
  """The item at the end of the edge"""
  node: CurrencyDetail

  """A cursor for use in pagination"""
  cursor: String!
}

enum CustomerBookingsOnlyEnum {
  FUTURE
  PAST
}

enum CustomerBookingsOrderEnum {
  ASC
  DESC
}

type CustomerSupportNumber {
  """Customer Support phone number locale territory"""
  localeTerritory: String

  """Customer Support phone number"""
  number: String

  """Country name from where the customer support information belongs"""
  countryName: String

  """Languages supported by customer service and availability hours"""
  supportedLanguages: [SupportedLanguage]

  """Additional information about the customer support phone number"""
  labels: [String]
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""Information about departure required to identify single booking."""
input DateAndIataCodeInput {
  """ISO date of the departure as YYYY-MM-DD"""
  date: Date!

  """3-letter IATA code of station."""
  iataCode: String!
}

"""You always have to setup exact date OR range from-to."""
input DateInput {
  """Exact date (cannot be used in combination with from-to fields)."""
  exact: Date

  """
  Start of the date range (cannot be used in combination with exact date).
  """
  from: Date

  """End of the date range (cannot be used in combination with exact date)."""
  to: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DepartureTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime

  """Location of arrival"""
  location: RouteStop

  """Flight duration in minutes."""
  duration: Int

  """Airline for the flight"""
  airline: Airline

  """Flight number"""
  flightNumber: Int
}

enum DirectAccessURLValues {
  CHANGE_TRIP
  INSURANCE
  SEATING
  PETS
  ASSISTANCE
  SPORT_EQUIPMENT
  MUSICAL_EQUIPMENT
  HOTELS
  CAR_RENTS
  REFUND
  BAGS
  EDIT_PASSENGERS
  CANCEL
  PENDING_SERVICES
  VALIDATE_PAYMENT
  TRAVEL_DOCUMENTS
  PAYMENT
}

interface DocumentInterface {
  """URL of the document"""
  url: String
}

"""A connection to a list of items."""
type DocumentInterfaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DocumentInterfaceEdge]
}

"""An edge in a connection."""
type DocumentInterfaceEdge {
  """The item at the end of the edge"""
  node: DocumentInterface

  """A cursor for use in pagination"""
  cursor: String!
}

type DownloadBoardingPassTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime

  """Leg corresponding to the boarding pass"""
  leg: Leg
}

type DownloadETicketTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime

  """URL of the eTicket"""
  ticketUrl: String
}

type DownloadInvoiceTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime

  """URL of the invoice"""
  invoiceUrl: String

  """Number of passengers"""
  numberPassengers: Int

  """Legs of the booking"""
  legs: [Leg]
}

input DurationInput {
  stopovers: StopoversInput
  maxFlightDuration: Int
}

"""Combination of flight and hotel"""
type DynamicPackage {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Accommodation part of the package"""
  hotel: Hotel

  """Transport part of the package"""
  flight: Flight

  """URL to the whitelabel page where this dynamic package can be purchased"""
  whitelabelUrl: String

  """Total price"""
  price: Price
}

"""A connection to a list of items."""
type DynamicPackageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DynamicPackageEdge]

  """Service that was used for fetching dynamic packages."""
  provider: Provider
}

"""An edge in a connection."""
type DynamicPackageEdge {
  """The item at the end of the edge"""
  node: DynamicPackage

  """A cursor for use in pagination"""
  cursor: String!
}

input DynamicPackagesSimpleSearchInput {
  """Valid airport code according the IATA standard"""
  fromAirport: String!

  """Valid airport code according the IATA standard"""
  toAirport: String!

  """List of outbound flight numbers (e.g. OK123)"""
  outboundFlights: [String!]!

  """List of inbound flight numbers (e.g. OK123)"""
  inboundFlights: [String!]!

  """Departure date"""
  date: Date!

  """Return date"""
  returnDate: Date!
  passengers: PassengersInput!
}

type EnterDetailsTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""How extra charges are calculated"""
enum ExtraChargeMode {
  PER_STAY
  PER_PERSON_PER_STAY
  PER_NIGHT
  PER_PERSON_PER_NIGHT
  PERCENTAGE
  VARIABLE
}

"""Breakdown of extra charges"""
type ExtraCharges {
  type: String
  name: String
  price: Price @deprecated(reason: "Use chargeAmount and chargePriceMode to calculate price instead, note that this value most likely will be wrong")
  chargePriceMode: ExtraChargeMode

  """Amount used to calculate charge, depending on chargePriceMode"""
  chargeAmount: String

  """
  The amount of the charge, it could be 0, and would then need to be calculated
  """
  amount: String
  excluded: Boolean
  currency: String
}

type FAQArticle implements FAQItemInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Title of the FAQ article or category."""
  title: String

  """Perex of the FAQ article or category."""
  perex: String

  """Original numeric id of the article"""
  originalId: Int @deprecated(reason: "Use field \"id\" instead with the opaque: false parameter")

  """Content of the article"""
  content: String

  """Upvotes about the utility of the article"""
  upvotes: Int

  """Downvotes about the utility of the article"""
  downvotes: Int
}

"""A connection to a list of items."""
type FAQArticleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FAQArticleEdge]
}

"""An edge in a connection."""
type FAQArticleEdge {
  """The item at the end of the edge"""
  node: FAQArticle

  """A cursor for use in pagination"""
  cursor: String!
}

type FAQCategory implements FAQItemInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Title of the FAQ article or category."""
  title: String

  """Perex of the FAQ article or category."""
  perex: String

  """Original numeric id of the FAQ category"""
  originalId: Int @deprecated(reason: "Use field \"id\" instead with the opaque: false parameter")

  """List of ancestor categories in the tree from the root."""
  ancestors: [FAQCategory]

  """List of FAQ categories & articles ordered by relevancy."""
  children: [FAQItemInterface]

  """List of subcategories"""
  subcategories: [FAQCategory] @deprecated(reason: "Use \"children\" field instead.")

  """List of FAQ articles"""
  FAQs: [FAQArticle] @deprecated(reason: "Use \"children\" field instead.")
}

enum FAQCommentType {
  CONFUSING
  DOESNT_ANSWER
  DONT_LIKE
  NOT_ACCURATE
  OTHER
}

type FAQError {
  """Code indicating the error type"""
  code: FAQErrorCode

  """Message with a further explanation of the error"""
  message: String
}

"""Possible FAQ queries Error codes"""
enum FAQErrorCode {
  UNKNOWN
  NOT_AUTHORIZED
  BOOKING_NOT_FOUND
  NO_FAQ_CATEGORIES
}

type FAQFeedbackResponse {
  article: FAQArticle

  """true if posting the response failed due to rate limit exhaustion"""
  isRateLimitExhausted: Boolean
}

interface FAQItemInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Title of the FAQ article or category."""
  title: String

  """Perex of the FAQ article or category."""
  perex: String
}

union FAQsByBookingResponse = FAQCategory | FAQError

enum FAQSection {
  BEFORE_BOOKING
  UPCOMING_BOOKING
  URGENT_BOOKING
  PAST_BOOKING
}

type Flight {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """List of all Airlines involved."""
  airlines: [Airline]
  departure: RouteStop
  arrival: RouteStop

  """Flight duration in minutes."""
  duration: Int

  """Flight segments, e.g. stopover, change of aircraft, etc."""
  legs: [Leg]

  """Total flight price."""
  price: Price

  """URL to the Kiwi.com for booking the flight."""
  bookingUrl: String
}

"""A connection to a list of items."""
type FlightConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FlightEdge]
}

"""An edge in a connection."""
type FlightEdge {
  """The item at the end of the edge"""
  node: Flight

  """A cursor for use in pagination"""
  cursor: String!
}

input FlightsFiltersInput {
  maxStopovers: Int
  duration: DurationInput
}

input FlightsOptionsInput {
  """An ISO-4217 currency code."""
  currency: Currency
  locale: Locale
}

input FlightsSearchInput {
  """From where you want to fly?"""
  from: [LocationRadiusInput!]!

  """To where you want to fly?"""
  to: [LocationRadiusInput!]!

  """When do you want to leave?"""
  date: DateInput!

  """When do you want to return?"""
  returnDate: DateInput
  passengers: PassengersInput
}

type GeoIP {
  """ISO country code"""
  isoCountryCode: String

  """Coordinates"""
  coordinates: Coordinates
}

type HolidayAccommodation {
  """Accommodation name, usually name of the hotel."""
  name: String

  """
  Rating using stars, number express how many stars were given to the accommodation.
  """
  starRating: Int
  previewImage: Image

  """Further location info where holiday takes place."""
  destination: Location
}

input HolidaysLocationInput {
  """Legacy ID used in Holidays Locations REST API"""
  locationId: String
}

type HolidayTravelInfo {
  """No. of nights to spend in holiday destination."""
  nightsInDestination: Int
}

"""General information about the hotel."""
type Hotel implements HotelInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Name of the hotel."""
  name: String
  address: Address
  review: HotelReview

  """
  Original (low level ID of the hotel). You are probably looking for "id" field.
  """
  originalId: String @deprecated(reason: "Use field \"id\" instead. This field is used only because of compatibility reasons with old APIs.")
  cityName: String

  """URL to our whitelabel page of this hotel."""
  whitelabelUrl: String

  """Main description (summary) of the hotel."""
  summary: String

  """Main photo of the hotel."""
  mainPhoto: HotelPhoto

  """Location of the hotel."""
  coordinates: Coordinates

  """The star rating of the hotel."""
  rating: HotelRating

  """All facilities available in the hotel."""
  facilities(after: String, first: Int, before: String, last: Int): HotelFacilityConnection @deprecated(reason: "Use amenities instead")

  """All amenities available in the hotel"""
  amenities: [HotelAmenity]

  """All rooms available in the hotel."""
  rooms(after: String, first: Int, before: String, last: Int): HotelRoomConnection

  """All available photos of the hotel."""
  photos(after: String, first: Int, before: String, last: Int): HotelPhotoConnection

  """Hotel distance from the center in Km."""
  distanceFromCenter: Float
}

input HotelAmenitiesInput {
  """Show only hotels having airport shuttle as a service."""
  airportShuttle: Boolean

  """Show only hotels having family rooms."""
  familyRooms: Boolean

  """Show only hotels having facilities for disabled."""
  facilitiesForDisabled: Boolean

  """Show only hotels having fitness room."""
  fitnessCenter: Boolean

  """Show only hotels having any parking."""
  parking: Boolean

  """Show only hotels having free parking."""
  freeParking: Boolean

  """Show only hotels having valet parking."""
  valetParking: Boolean

  """Show only hotels having indoor swimming pool."""
  indoorPool: Boolean

  """Show only hotels having pets allowed."""
  petsAllowed: Boolean

  """Show only hotels having spa."""
  spa: Boolean

  """Show only hotels having wifi."""
  wifi: Boolean
}

type HotelAmenity {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Name of the amenity."""
  name: String
}

"""Information about hotel availability during selected time period."""
type HotelAvailability implements HotelAvailabilityInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  price: Price @deprecated(reason: "Use total field instead")

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  total: Money
  availableRooms: [HotelRoomAvailability]
  hotel: Hotel
}

"""A connection to a list of items."""
type HotelAvailabilityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HotelAvailabilityEdge]
  stats: HotelAvailabilityStats

  """Name of the closest city"""
  cityName: String
}

"""An edge in a connection."""
type HotelAvailabilityEdge {
  """The item at the end of the edge"""
  node: HotelAvailability

  """A cursor for use in pagination"""
  cursor: String!
}

interface HotelAvailabilityInterface {
  id: ID
  price: Price
  total: Money
  availableRooms: [HotelRoomAvailabilityInterface]
  hotel: HotelInterface
}

"""
Overall statistics related to all hotels matching search & filter criteria
"""
type HotelAvailabilityStats {
  priceMax: Float @deprecated(reason: "Use \"maxPrice\" field instead.")
  priceMin: Float @deprecated(reason: "Use \"minPrice\" field instead.")
  minPrice: Float
  maxPrice: Float
}

type HotelCity {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Name of the hotel."""
  name: String
  location: Coordinates
  numberOfHotels: Int

  """Two letter country code of the city."""
  countryCode: String
}

"""A connection to a list of items."""
type HotelCityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HotelCityEdge]
}

"""An edge in a connection."""
type HotelCityEdge {
  """The item at the end of the edge"""
  node: HotelCity

  """A cursor for use in pagination"""
  cursor: String!
}

"""Use HotelAmenitiesInput instead"""
input HotelFacilitiesInput {
  """Show only hotels having airport shuttle as a service."""
  airportShuttle: Boolean

  """Show only hotels having family rooms."""
  familyRooms: Boolean

  """Show only hotels having facilities for disabled."""
  facilitiesForDisabled: Boolean

  """Show only hotels having fitness room."""
  fitnessCenter: Boolean

  """Show only hotels having any parking."""
  parking: Boolean

  """Show only hotels having free parking."""
  freeParking: Boolean

  """Show only hotels having valet parking."""
  valetParking: Boolean

  """Show only hotels having indoor swimming pool."""
  indoorPool: Boolean

  """Show only hotels having pets allowed."""
  petsAllowed: Boolean

  """Show only hotels having spa."""
  spa: Boolean

  """Show only hotels having wifi."""
  wifi: Boolean
}

type HotelFacility {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Name of the facility."""
  name: String
}

"""A connection to a list of items."""
type HotelFacilityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HotelFacilityEdge]
}

"""An edge in a connection."""
type HotelFacilityEdge {
  """The item at the end of the edge"""
  node: HotelFacility

  """A cursor for use in pagination"""
  cursor: String!
}

interface HotelInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  name: String
  address: Address
  review: HotelReview
  summary: String
  mainPhoto: HotelPhoto
  rating: HotelRating
  photos: HotelPhotoConnection
  amenities: [HotelAmenity]
  coordinates: Coordinates
}

"""The urls where the user will be redirected for payment"""
type HotelPaymentUrls {
  bookingComPaymentUrl: String
  stay22PaymentUrl(paymentLink: String!): String
}

type HotelPhoto {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  lowResUrl: String
  highResUrl: String
  thumbnailUrl: String
}

"""A connection to a list of items."""
type HotelPhotoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HotelPhotoEdge]
}

"""An edge in a connection."""
type HotelPhotoEdge {
  """The item at the end of the edge"""
  node: HotelPhoto

  """A cursor for use in pagination"""
  cursor: String!
}

"""Price with extra charges, included and excluded"""
type HotelPrice {
  price: Price @deprecated(reason: "Use money type instead")
  total: Money
  extraCharges: [ExtraCharges]
}

type HotelRating {
  """Star rating is always in the interval 1-5 inclusive."""
  stars: Int

  """Name of the stars category."""
  categoryName: String
}

type HotelReview {
  """The review score of the hotel, in the range 1-10 inclusive."""
  score: Float

  """The review score of the hotel in words."""
  description: String

  """The number of reviews of the hotel."""
  count: Int
}

type HotelRoom implements HotelRoomInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Type of the hotel room."""
  type: String

  """
  Note that this number should not be used to display number of person for
  booking a room. This will simply say how many persons will fit in the room
  type. There could be different price for one person living in a double room vs
  two pepole living in a double room
  """
  maxPersons: Int
  bedding: [HotelRoomBedding]

  """All available photos of the hotel room."""
  photos(after: String, first: Int, before: String, last: Int): HotelRoomPhotoConnection @deprecated(reason: "use roomPhotos")

  """All available photos of the hotel room."""
  roomPhotos: [HotelPhoto]
  description: HotelRoomDescription

  """The hotelroom size in square meters"""
  roomSize: Float
}

type HotelRoomAvailability implements HotelRoomAvailabilityInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Is the hotelroom refundable"""
  isRefundable: Boolean

  """Is breakfast included in the hotelroom"""
  isBreakfastIncluded: Boolean

  """Base price for the room in this configuration."""
  minimalPrice: Price @deprecated(reason: "Use money instead")

  """Base price for the room in this configuration."""
  minimalCost: Money
  incrementalPrice: [Price] @deprecated(reason: "Use incrementalPriceWithExtraCharges instead")

  """Includes room price with extra charges like VAT and city tax"""
  incrementalPriceWithExtraCharges: [HotelPrice]

  """The amount of available rooms for this type"""
  availableRoomsCount: Int

  """
  Note that this name is different from HotelRoomDescription.title. This name
  contains information also about the block type.
  """
  name: String

  """
  Note that this is different from HotelRoomInterface.maxPersons.
  HotelRoomInterface.maxPersons will show you max number of guests on the room
  type. This maxOccupancy will show you max number of guests for the
  reservation. There could be different price for a double room with one person
  living in it, vs two people living in it.
  """
  maxOccupancy: Int

  """Original block ID used to open Booking.com page."""
  originalId: String @deprecated(reason: "Use \"id\" field whenever possible.")
  room: HotelRoom
}

interface HotelRoomAvailabilityInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  isRefundable: Boolean
  isBreakfastIncluded: Boolean
  minimalPrice: Price
  minimalCost: Money
  incrementalPrice: [Price]
  incrementalPriceWithExtraCharges: [HotelPrice]
  room: HotelRoomInterface
  availableRoomsCount: Int
  name: String
  maxOccupancy: Int
}

type HotelRoomBedding {
  type: String
  amount: Int
}

"""A connection to a list of items."""
type HotelRoomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HotelRoomEdge]
}

type HotelRoomDescription {
  title: String
  text: String
}

"""An edge in a connection."""
type HotelRoomEdge {
  """The item at the end of the edge"""
  node: HotelRoom

  """A cursor for use in pagination"""
  cursor: String!
}

interface HotelRoomInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  description: HotelRoomDescription
  roomPhotos: [HotelPhoto]
  maxPersons: Int
  bedding: [HotelRoomBedding]
}

"""A connection to a list of items."""
type HotelRoomPhotoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HotelRoomPhotoEdge]
}

"""An edge in a connection."""
type HotelRoomPhotoEdge {
  """The item at the end of the edge"""
  node: HotelPhoto

  """A cursor for use in pagination"""
  cursor: String!
}

"""Meta data for hotel search"""
type HotelSearchMeta {
  minPrice: Money
  maxPrice: Money
}

type HotelService {
  relevantLocations: [HotelServiceRelevantLocation]
  roomsConfiguration: RoomsConfigurationOutput
}

type HotelServiceRelevantLocation {
  location: Location
  hotelCity: HotelCity
  checkin: Date
  checkout: Date
}

input HotelsFilterInput {
  """List of hotels classes (stars) you want to filter."""
  starsRating: [Int]

  """Deprecated -> Use minimumPrice instead"""
  minPrice: Float

  """Deprecated -> Use maximumPrice instead"""
  maxPrice: Float

  """
  Show only hotels having minimum total price lower than or equal to this value.
  """
  minimumPrice: String

  """
  Show only hotels having minimum total price higher than or equal to this value.
  """
  maximumPrice: String

  """Deprecated -> use hotelAmenities instead."""
  hotelFacilities: HotelFacilitiesInput

  """Show only hotels having specified hotel amenities"""
  hotelAmenities: HotelAmenitiesInput

  """
  Show only hotels having minimum review score higher than or equal to this value. Score must be between 1 and 10.
  """
  minScore: Int

  """Show only hotels having free cancellation."""
  freeCancellation: Boolean

  """Show only hotels having the selected Mealplan"""
  mealplan: Mealplan
}

"""You must provide lat/lng combination OR city ID."""
input HotelsSearchInput {
  """Latitude in float format (example: 45.4654)."""
  latitude: Float

  """Longitude in float format (example: 9.1859)."""
  longitude: Float

  """Search radius in kilometres around specified coordinate"""
  radius: Float = 50

  """Opaque ID of the city."""
  cityId: String

  """Must not be before today."""
  checkin: Date!

  """Max 365 days in the future, and max 30 days greater than checkin date."""
  checkout: Date!
  language: Language
  roomsConfiguration: [RoomsConfiguration!]!
}

type Identity {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Internal database ID."""
  databaseId: String @deprecated(reason: "Use id field instead.")

  """Raw input by user, use "login" if you want normalized email."""
  email: String
  emailVerified: Boolean
  firstName: String
  lastName: String

  """Concatenation of first and last name with fallback to the login field."""
  fullName: String

  """Use this in API calls. It is email but normalized."""
  login: String
}

type Image {
  url: String
  dimensions: ImageDimensions
}

type ImageDimensions {
  """Width of image in pixels."""
  width: Int

  """Height of image in pixels."""
  height: Int
}

type InsurancePrice {
  price: Price

  """Insurance type"""
  insuranceType: InsuranceType
}

type InsuranceService {
  """Returns passengers allowed to buy a travel insurance."""
  passengers: [Passenger]
}

"""Insurance Terms and Conditions document"""
type InsuranceTerms implements DocumentInterface {
  """URL of the document"""
  url: String
}

"""The possible insurance type values"""
enum InsuranceType {
  NONE
  TRAVEL_BASIC
  TRAVEL_PLUS
}

scalar IP

"""Use "Accept-Language" HTTP header to specify locale."""
enum Language {
  ar @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  bg @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ca @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  cs @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  da @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  de @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  el @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  engb @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  enus @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  esar @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  et @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  fi @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  fr @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  he @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  hr @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  hu @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  id @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  is @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  it @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ja @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ko @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  lt @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  lv @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ms @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  nl @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  no @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  pl @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  pt @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ptbr @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ptpt @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ro @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ru @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sk @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sl @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sr @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sv @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  th @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  tl @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  tr @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  uk @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  vi @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  zh @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  zhcn @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  zhtw @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
}

type LeaveForAirportTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""
Leg is the operation of an aircraft from one scheduled departure station to its next scheduled arrival station.
"""
type Leg {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  airline: Airline
  operatingAirline: OperatingAirline
  arrival: RouteStop
  departure: RouteStop

  """Leg duration in minutes."""
  duration: Int

  """Leg stopover duration before this leg in minutes."""
  stopoverDuration: Int
  flightNumber: Int

  """Reservation number related to the leg."""
  pnr: String
  recheckRequired: Boolean

  """Determines whether Leg is related to return flight."""
  isReturn: Boolean
  vehicle: Vehicle
  type: VehicleType

  """Information about who covers the transfer"""
  guarantee: CoveredBy

  """Boarding pass for this leg"""
  boardingPass: BoardingPass
}

"""
DEPRECATED - use "Accept-Language" HTTP header to specify locale.Language tag in the format of the RFC 5646.
"""
enum Locale {
  bg_BG @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ca_ES @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  cs_CZ @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  da_DK @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  de_DE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  de_AT @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  de_CH @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  el_GR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_GB @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_AU @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_CA @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_EE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_HK @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_IN @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_IE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_MY @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_NZ @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_SG @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_ZA @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_PH @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  en_US @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_ES @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_AR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_CL @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_CO @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_EC @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_PE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  es_MX @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  fr_FR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  fr_BE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  fr_CA @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  hr_HR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  id_ID @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  is_IS @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  it_IT @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ja_JP @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  lt_LT @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  he_IL @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  hu_HU @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  nl_NL @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  no_NO @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  nb_NO @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  nn_NO @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  pl_PL @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  pt_PT @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  pt_BR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ro_RO @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ru_RU @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ru_BY @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ru_KZ @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sk_SK @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sr_RS @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  fi_FI @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  sv_SE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  th_TH @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  tr_TR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  vi_VN @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  uk_UA @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_SA @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_BH @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_JO @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_KW @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_OM @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_QA @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ar_AE @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  ko_KR @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  zh_CN @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
  zh_TW @deprecated(reason: "Use \"Accept-Language\" HTTP header to specify locale.")
}

type Location {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """3-letter IATA code of airport or internal city code."""
  locationId: String
  name: String
  slug: String
  timezone: String
  location: Coordinates

  """Airport, city or country."""
  type: String
  city: LocationArea
  subdivision: LocationArea
  country: LocationArea
  continent: LocationArea
  countryFlagURL: String
  isActive: Boolean
  stationsCount: Int
  airportsCount: Int
  alternativeNames: [String]
  autonomousTerritory: LocationArea
  rank: Int
  code: String
  tags: [LocationTag]
}

type LocationArea {
  locationId: String
  name: String
  slug: String
  code: String
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge"""
  node: Location

  """A cursor for use in pagination"""
  cursor: String!
}

input LocationInput {
  """Legacy ID used in Locations REST API"""
  locationId: String

  """Location identification used in URL for SEO reasons"""
  slug: String
}

input LocationRadiusInput {
  location: String
  radius: RadiusInput
}

input LocationsOptionsInput {
  """
  DEPRECATED - use "Accept-Language" HTTP header to specify locale.Language tag in the format of the RFC 5646.
  """
  locale: Locale

  """Desired location type the response should only include."""
  locationType: LocationType

  """Desired location types the response should only include."""
  locationTypes: [LocationType!]

  """
  Locations by some providers are hidden by default and have to be explicitly enabled.
  """
  providerIds: [Int!]
}

type LocationTag {
  name: String

  """If null, tag is valid for the whole year"""
  monthsConstraint: MonthsConstraint
}

"""Type of location"""
enum LocationType {
  airport
  autonomous_territory
  bus_station @deprecated(reason: "This type has been removed and there is no replacement for it.")
  city
  country
  special
  station
  subdivision
}

type LoungeService {
  relevantAirports: [LoungeServiceRelevantAirports]
}

type LoungeServiceRelevantAirports {
  whitelabelURL: String
  location: Location
}

enum Mealplan {
  FULL_BOARD
  ALL_INCLUSIVE
  HALF_BOARD
  BREAKFAST_INCLUDED
}

type Money {
  """
  Amount is a string type because it's not recommended to work with floats in
  your application when working with money. This little change suggest that you
  should use something like [decimal.js](https://github.com/MikeMcl/decimal.js/) for example.
  """
  amount: String

  """An ISO-4217 currency code."""
  currencyId: String
}

scalar MonthNumber

type MonthsConstraint {
  """Month number, range 1 to 12"""
  from: MonthNumber

  """Month number, range 1 to 12"""
  to: MonthNumber
}

type NavigateToTerminalTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type NoMoreEditsTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

type OperatingAirline {
  """IATA code of the operating airline."""
  iata: String
  name: String
}

enum OrderBy {
  DISTANCE
  POPULARITY
  PRICE
  RANKING
  REVIEW_SCORE
  STARS
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type ParkingService {
  whitelabelURL: String
}

"""The passengers associated with the booking"""
type Passenger {
  databaseId: Int
  firstname: String
  lastname: String
  fullName: String
  insuranceType: InsuranceType
  title: String
  birthday: DateTime
  nationality: String
  travelDocument: TravelDocument

  """Visa information for the passenger"""
  visaInformation: Visa

  """Url needed for apple wallet integration"""
  pkpasses: [Pkpass] @deprecated(reason: "Use pkpass under boarding pass instead")
}

input PassengerInput {
  passengerId: Int!

  """Expiry date of travel document"""
  documentExpiry: Date

  """Number of travel document"""
  documentNumber: String!
}

input PassengerInsuranceInput {
  passengerId: Int!

  """New insurance type for passenger"""
  insuranceType: InsuranceType
}

type PassengerSegment {
  passengerId: Int
  price: AncillaryPrice
  segmentCode: String
}

input PassengersInput {
  adults: Int!
  infants: Int
}

type PaymentConfirmedTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""Url needed for apple wallet integration"""
type Pkpass {
  flightNumber: String

  """The url to the pkpass file"""
  url: String
  passenger: Passenger
}

"""
Deprecated -> use Money instead, because you should not use floats for currencies
"""
type Price {
  amount: Float

  """An ISO-4217 currency code."""
  currency: String
}

"""Service for fetching dynamic packages."""
enum Provider {
  BEDFINDER
}

input RadiusInput {
  """Latitude of the center of the circle."""
  lat: Float!

  """Longitude of the center of the circle."""
  lng: Float!

  """Distance in kilometers."""
  radius: Int!
}

type ResetPasswordResponse {
  success: Boolean
}

input RoomConfigInput {
  roomId: ID!
  count: Int!
}

input RoomsChildrenConfiguration {
  age: Int
}

input RoomsConfiguration {
  adultsCount: Int!
  children: [RoomsChildrenConfiguration]
}

"""Booking.com rooms configuration"""
type RoomsConfigurationOutput {
  adultsCount: Int
  children: [ChildrenType]
}

"""Root Mutation."""
type RootMutation {
  _addFAQArticleComment(
    """Masked ID of FAQ article to receive vote."""
    id: ID

    """Original ID of FAQ article to receive vote (Unmasked)."""
    originalId: Int

    """Value indicating the comment type."""
    type: FAQCommentType!

    """Comment text"""
    comment: String!
  ): FAQFeedbackResponse
  addFAQArticleComment(
    """Masked ID of FAQ article to receive vote."""
    id: ID

    """Original ID of FAQ article to receive vote (Unmasked)."""
    originalId: Int

    """Value indicating the comment type."""
    type: FAQCommentType!

    """Comment text"""
    comment: String!
  ): FAQFeedbackResponse

  """Check whether given e-mail has any associated account or bookings."""
  checkEmail(email: String!, brand: Brand = "kiwicom"): CheckEmailResponse

  """Create Kiwi.com user account."""
  createAccount(credentials: CreateAccountInput!, brand: Brand = "kiwicom"): CreateAccountResponse

  """Mutation to add persisted queries -> Not yet production ready"""
  createStoredOperations(persistedOperations: [StoredOperationInput!]!): CreateStoredOperation
  login(email: String!, password: String!): User @deprecated(reason: "Use \"signIn\" mutation instead.")
  refundInsurance(
    """The global booking id"""
    id: ID!
    simpleToken: String!
    passengers: [PassengerInsuranceInput!]!
    brand: String = "kiwicom"
  ): Booking
  resetPassword(email: String!, brand: String = "kiwicom"): ResetPasswordResponse

  """Sends time limited link on given e-mail to log in."""
  sendMagicLink(email: String!, brand: Brand = "kiwicom"): SendMagicLinkResponse

  """
  Get "simple token" which can be used to retrieve booking in "singleBooking" query without authorization.
  """
  createSimpleToken(input: CreateSimpleTokenInput!): CreateSimpleTokenResponse

  """Log into Kiwi.com account with email & password."""
  signIn(email: String!, password: String!, brand: Brand = "kiwicom"): SignInResponse
  updatePassenger(
    """The global booking id"""
    id: ID!
    simpleToken: String
    passengers: [PassengerInput!]!
  ): UpdatePassenger
  voteFAQArticle(
    """Masked ID of FAQ article to receive vote."""
    id: ID

    """Original ID of FAQ article to receive vote (Unmasked)."""
    originalId: Int

    """Type of vote for article (up/down)"""
    vote: VoteType
  ): FAQArticle
}

"""Root Query"""
type RootQuery {
  """
  Search for all available hotels in one location. It's necessary to send
  checkin and checkout dates as well as rooms configuration to get availability info.
  """
  allAvailableBookingComHotels(search: HotelsSearchInput!, filter: HotelsFilterInput, options: AvailableHotelOptionsInput, first: Int = 50, after: String): AllHotelAvailabilityHotelConnection

  """
  Search for all available hotels in one location. It's necessary to send
  checkin and checkout dates as well as rooms configuration to get availability info.
  """
  allAvailableHotels(search: HotelsSearchInput!, filter: HotelsFilterInput, options: AvailableHotelOptionsInput, after: String, first: Int = 50, before: String, last: Int): HotelAvailabilityConnection @deprecated(reason: "This query has serious performace issues. That is basically because we are overfeching data\n  from the https://distribution-xml.booking.com/2.0/json/hotels endpoint with way to many extras.\n  Use allAvailableBookingComHotels instead")

  """All available hotels from provider stay22 for the given time"""
  allAvailableStay22Hotels(search: Stay22HotelsSearchInput!, filter: HotelsFilterInput, after: String, first: Int = 50, before: String, last: Int): AllAvailableStay22HotelConnection

  """Search for the urls of public documents"""
  allDocuments(after: String, first: Int, before: String, last: Int): DocumentInterfaceConnection

  """
  All dynamic packages. Dynamic package is a combination of return flight and
  accommodation in hotel. It saves time and also the price should be better then
  buying flight and acommodation separately.
  """
  allDynamicPackages(
    simpleSearch: DynamicPackagesSimpleSearchInput!

    """An ISO-4217 currency code."""
    currency: Currency
    after: String
    first: Int
    before: String
    last: Int
  ): DynamicPackageConnection

  """Search for Frequently Asked Questions"""
  allFAQs(
    """Keyword for the search"""
    search: String
    after: String
    first: Int
    before: String
    last: Int
  ): FAQArticleConnection

  """Search for scheduled flights."""
  allFlights(search: FlightsSearchInput!, options: FlightsOptionsInput, filters: FlightsFiltersInput, after: String, first: Int, before: String, last: Int): FlightConnection

  """
  Search for airports, cities, countries. You can search by location name,
  radius on the map or rectangle on the map. If you do not specify one of these
  search inputs then the alphabetical dump of all locations is returned.
  """
  allLocations(
    """Search location by name."""
    search: String

    """Search location by radius."""
    radius: RadiusInput

    """Search location by area."""
    area: AreaInput

    """Combination of slug and radius. e.g. bratislava-slovakia-169km"""
    slugRadius: String

    """List of legacy location IDs"""
    legacyIds: [String!]
    options: LocationsOptionsInput
    after: String
    first: Int
    before: String
    last: Int
  ): LocationConnection

  """All locations in certain location. For example all airports in London"""
  allSubLocations(
    """Location ID"""
    id: String!
    options: LocationsOptionsInput
    after: String
    first: Int
    before: String
    last: Int
  ): LocationConnection

  """
  Ancillaries are additional services that can be purchased with a Booking
  """
  ancillaries3rdOffers(ancillaries: [Ancillaries3rdServices]!, passengers: Int!, itinerary: [Ancillaries3rdItinerary]!, after: String, first: Int, before: String, last: Int): Ancillaries3rdOffersConnection

  """Get information about ordered ancillaries"""
  bookingAncillaries(bookingId: Int!, attachmentsFor: [AttachmentsFor!]): Ancillaries

  """
  Search for single available hotel by its ID. It's necessary to send checkin
  and checkout dates as well as rooms configuration to get availability info.
  """
  availableHotel(search: AvailableHotelSearchInput!, options: AvailableHotelOptionsInput): HotelAvailability

  """Get the timeline for your booking."""
  bookingTimeline(
    """Only Booking id can be used as ID."""
    id: ID!

    """
    DEPRECATED: use correctly named "simpleToken" arg instead.Simple token that
    lets you fetch a unique booking without authorization.
    """
    authToken: String

    """
    Simple token that lets you fetch a unique booking without authorization.
    """
    simpleToken: String
    brand: String = "kiwicom"
  ): BookingTimeline

  """Currencies used on Kiwi.com frontend"""
  currencies(after: String, first: Int, before: String, last: Int): CurrencyDetailConnection

  """Detail of a currency as used on Kiwi.com frontend"""
  currency(
    """The currency code used on Kiwi.com frontend"""
    code: String!
  ): CurrencyDetail

  """Current user information."""
  currentUser: Identity

  """Search for your flight bookings."""
  customerBookings(
    """
    Allows to filter only future bookings or only past bookings but not both.
    You can skip this argument to fetch all bookings (future and past).
    """
    only: CustomerBookingsOnlyEnum

    """
    Allows to order bookings in ascending or descending order by departure date.
    You can skip this argument to fetch all bookings in ascendering order.
    """
    order: CustomerBookingsOrderEnum
    brand: String = "kiwicom"
    after: String
    first: Int
    before: String
    last: Int
  ): BookingInterfaceConnection

  """
  Get CS number by your locale in "Accept-Language" HTTP header. Null if not CS phone is unavailable.
  """
  customerSupportNumber: CustomerSupportNumber

  """Get all customer support numbers"""
  allCustomerSupportNumbers: AllCustomerSupportNumbers

  """Retrieve single FAQ article."""
  FAQArticle(
    """
    Masked ID of the FAQ article to retrieve. If both IDs are provided, this one will be used
    """
    id: ID

    """Original ID of the FAQ article to retrieve (Unmasked)"""
    originalId: Int
  ): FAQArticle

  """Retrieve specific FAQ category and its subcategories & articles."""
  FAQCategory(
    """
    Masked ID of the FAQ category to retrieve.  If both IDs are provided, this one will be used
    """
    id: ID

    """Original ID of the FAQ category to retrieve (Unmasked)"""
    originalId: Int
  ): FAQCategory

  """Retrieve category by section."""
  FAQSection(
    """
    Fetch FAQ category by section according to current customer's booking status.
    """
    section: FAQSection!
  ): FAQCategory

  """Query that wraps all the Self Service queries"""
  selfService: SelfServiceQueries

  """Geography info by an IP address"""
  geoIP(ip: IP!): GeoIP

  """Single hotel by ID."""
  hotel(id: ID!, language: Language): Hotel

  """
  All cities where you can find the hotels. This query can be used for
  suggestions of relevant cities (search for example). Cities can be filtered
  by prefix with typo tolerance. Items are sorted by prefix matching and a
  number of hotels (desc). When the prefix is omitted top cities are returned.
  """
  hotelCities(
    """First few letters."""
    prefix: String

    """Search for cities around a given position."""
    position: CoordinatesInput
    after: String
    first: Int
    before: String
    last: Int
  ): HotelCityConnection

  """Url where user will be redirected for payment"""
  hotelPaymentUrls(hotelId: ID, roomConfig: [RoomConfigInput]): HotelPaymentUrls

  """Single location by various inputs."""
  location(input: LocationInput): Location

  """
  Find most relevant booking relative to current time. That is a booking with
  the smallest difference between current time and arrival time of one of its
  Legs. If no future booking is found, then the nearest past booking is returned.
  """
  nearestBooking(
    brand: String = "kiwicom"

    """
    Filter out only the one which has upcoming leg covered by specified guarantee.
    """
    guarantee: CoveredBy
  ): BookingInterface

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Find booking by its id and its simple access token."""
  singleBooking(
    """
    Database ID (human readable ID) of the booking. You should use "node" query if you want to use opaque ID.
    """
    id: Int!

    """
    DEPRECATED: use correctly named "simpleToken" arg instead.Simple token that
    lets you fetch a unique booking without authorization.
    """
    authToken: String

    """
    Simple token that lets you fetch a unique booking without authorization.
    """
    simpleToken: String
    brand: String = "kiwicom"
  ): BookingInterface

  """Single hotel by ID."""
  stay22HotelDetail(id: ID!, guests: Int!, checkin: Date!, checkout: Date!, currency: Currency = EUR): Stay22HotelDetail

  """Search for holidays locations by name"""
  holidaysLocations(
    """Search locations by name."""
    search: String!
    after: String
    first: Int
    before: String
    last: Int
  ): LocationConnection

  """Single Holidays location by legacy ID."""
  holidaysLocation(input: HolidaysLocationInput): Location

  """
  Destinations most searched / clicked on / booked from the starting location.
  """
  topDestinations(
    """Legacy ID of source location"""
    legacyId: String!
    after: String
    first: Int
    before: String
    last: Int
  ): LocationConnection
}

type RouteStop {
  airport: Location
  time: DateTime
  localTime: DateTime

  """City id of the route stop"""
  cityId: String

  """Terminal of the route stop"""
  terminal: String

  """Gate for the route stop"""
  gate: String
}

"""All the queries related to Self Service. The FAQ queries are here"""
type SelfServiceQueries {
  """Retrieve FAQ category according to current customer's booking status."""
  FAQsByBooking(
    """Booking ID to fetch the FAQs from"""
    bid: Int
  ): FAQsByBookingResponse
}

type SendMagicLinkResponse {
  success: Boolean
}

type Services {
  """Travel insurance - returns "null" if not available."""
  insurance: InsuranceService
}

type SignInResponse {
  user: User
  success: Boolean
}

type SimpleToken {
  token: String
  directAccessURL(baseURL: String = "https://kiwi.com"): String
}

type SimpleTokenError {
  code: SimpleTokenErrorCode
  message: String
}

enum SimpleTokenErrorCode {
  """Booking matching provided values was not found."""
  NOT_FOUND
  UNKNOWN
}

type Stay22Hotel implements HotelInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Name of the hotel."""
  name: String
  address: Address
  review: HotelReview

  """Main description (summary) of the hotel."""
  summary: String

  """All available photos of the hotel."""
  photos(after: String, first: Int, before: String, last: Int): HotelPhotoConnection

  """Main photo of the hotel."""
  mainPhoto: HotelPhoto

  """The star rating of the hotel."""
  rating: HotelRating

  """All amenities available in the hotel"""
  amenities: [HotelAmenity]
  coordinates: Coordinates
}

type Stay22HotelDetail implements HotelAvailabilityInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  price: Price @deprecated(reason: "Use total field instead")

  """
  Total price for all guests and nights and in the hotel. (including VAT)
  """
  total: Money
  hotel: Stay22Hotel
  availableRooms: [Stay22HotelRoomAvailability]
  paymentLink: String
}

type Stay22HotelRoom implements HotelRoomInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!
  description: HotelRoomDescription
  roomPhotos: [HotelPhoto]
  maxPersons: Int
  bedding: [HotelRoomBedding]
}

type Stay22HotelRoomAvailability implements HotelRoomAvailabilityInterface {
  """
  The globally unique ID of an object. You can unmask this ID to get original
  value but please note that this unmasked ID is not globally unique anymore and
  therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Is the hotelroom refundable"""
  isRefundable: Boolean

  """Is breakfast included in the hotelroom"""
  isBreakfastIncluded: Boolean

  """Base price for the room in this configuration."""
  minimalPrice: Price @deprecated(reason: "Use money instead")

  """Base price for the room in this configuration."""
  minimalCost: Money
  incrementalPrice: [Price] @deprecated(reason: "Use incrementalPriceWithExtraCharges instead")

  """Includes room price with extra charges like VAT and city tax"""
  incrementalPriceWithExtraCharges: [HotelPrice]

  """The amount of available rooms for this type"""
  availableRoomsCount: Int

  """
  Note that this name is different from HotelRoomDescription.title. This name
  contains information also about the block type.
  """
  name: String

  """
  Note that this is different from HotelRoomInterface.maxPersons.
  HotelRoomInterface.maxPersons will show you max number of guests on the room
  type. This maxOccupancy will show you max number of guests for the
  reservation. There could be different price for a double room with one person
  living in it, vs two people living in it.
  """
  maxOccupancy: Int
  room: Stay22HotelRoom
}

input Stay22HotelsSearchInput {
  latitude: Float!
  longitude: Float!

  """Adults and children"""
  guests: Int!
  checkin: Date!
  checkout: Date!
  currency: Currency = EUR

  """Order results by this input type"""
  orderBy: OrderBy = POPULARITY
}

input StopoversInput {
  """Minimum number of hours of stopover duration."""
  from: Int

  """Maximum number of hours of stopover duration."""
  to: Int
}

type StoredOperation {
  """The md5 has generated by relay compiler"""
  operationId: String

  """The entire query generated by relay compiler"""
  text: String
}

input StoredOperationInput {
  """The md5 has generated by relay compiler"""
  operationId: String!

  """The entire query generated by relay compiler"""
  text: String!
}

type SupportedLanguage {
  """Customer support language"""
  language: String

  """Customer support language code"""
  languageCode: String

  """Customer support availability schedule"""
  phoneLanguageAvailability: CSPhoneAvailabilityWorkingDays
}

interface TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

type TimeToCheckinTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

type TransportationService {
  relevantLocations: [TransportationServiceRelevantLocations]
}

type TransportationServiceRelevantLocations {
  location: Location
  whitelabelURL: String
  date: Date
}

type TransportFromAirportTimelineEvent implements TimelineEvent {
  """Time of appearance in the timeline."""
  timestamp: DateTime
}

"""Travel document info"""
type TravelDocument {
  idNumber: String
  expiration: DateTime
}

"""Single travel from origin to destination, with possible stopovers."""
type Trip {
  departure: RouteStop
  arrival: RouteStop

  """Trip duration in minutes."""
  duration: Int
  legs: [Leg]
}

type UpdatePassenger {
  success: Boolean
}

type User {
  token: String
  isLoggedIn: Boolean
  identity: Identity

  """
  User settings & credit balances related to making bookings on Kiwi.com.
  """
  bookingIdentity: BookingIdentity
}

type Vehicle {
  manufacturer: String
  model: String
}

enum VehicleType {
  BUS
  TRAIN
  AIRCRAFT
}

"""Visa information for passenger"""
type Visa {
  """Countries where visa is required"""
  requiredIn: [Location]

  """Countries where visa might be required"""
  warningIn: [Location]

  """Countries where visa is not required"""
  okIn: [Location]
}

enum VoteType {
  up
  down
}

type WhitelabeledServices {
  lounge: LoungeService
  parking: ParkingService
  carRental: CarRentalService
  hotel: HotelService
  transportation: TransportationService
}
