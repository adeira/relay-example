# @generated SignedSource<<61eff28ca34068e0d32355fa3790bfc6>>

# <BREAKING-CHANGES-LOG>
# </BREAKING-CHANGES-LOG>

schema {
  query: RootQuery
  mutation: RootMutation
}

"""Response type indicating an error"""
type AddLocationError implements Error {
  message: String
}

"""Input type for creating a location"""
input AddLocationInput {
  """3-letter IATA code of airport or internal city code."""
  locationId: String!
  name: String!

  """Airport, city or country."""
  type: LocationType!
}

union AddLocationOrError = AddLocationError | AddLocationResponse

"""
The newly created location edge that can be automatically added into a connection by Relay
"""
type AddLocationResponse {
  locationEdge: LocationEdge
}

"""The currency object. Note this is just mocked data"""
type Currency {
  """The code of the currency """
  code: String

  """Format string of the currency"""
  format: String

  """
  The globally unique ID of an object. You can unmask this ID to get original value but please note that this unmasked ID is not globally unique anymore and therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """Currency rate compared to Euro"""
  rate: Float
}

"""Interface to describe an error"""
interface Error {
  message: String
}

"""Location type"""
type Location {
  airportsCount: Int
  code: String
  country: LocationArea
  countryFlagURL: String

  """
  The globally unique ID of an object. You can unmask this ID to get original value but please note that this unmasked ID is not globally unique anymore and therefore it cannot be used as a cache key.
  """
  id(opaque: Boolean = true): ID!

  """3-letter IATA code of airport or internal city code."""
  locationId: String
  name: String
  rank: Int
  slug: String
  stationsCount: Int
  timezone: String

  """Airport, city or country."""
  type: String
}

"""Area of a location"""
type LocationArea {
  code: String
  locationId: String
  name: String
  slug: String
}

"""A connection to a list of items."""
type LocationConnection {
  """A list of edges."""
  edges: [LocationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type LocationEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Location
}

enum LocationType {
  AIRPORT
  CITY
  COUNTRY
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Root Mutation."""
type RootMutation {
  """Add a new location"""
  addLocation(location: AddLocationInput!): AddLocationOrError
}

"""Root Query"""
type RootQuery {
  """
  Detail of a currency. Please note: This is not real data, only Math.random() is return
  """
  currency(
    """The currency code"""
    code: String!
  ): Currency
  locations(after: String, before: String, first: Int, last: Int): LocationConnection
}
